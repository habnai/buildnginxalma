- name: Check if user is root
  fail:
    msg: >-
      Error: You must be root to run this script, please use the root user to
      install the software.
  when: ansible_user_uid != 0
- name: Update apt packages
  apt:
    update_cache: 'yes'
- name: Install required packages
  apt:
    name: '{{ item }}'
    state: present
  loop:
    - git
    - gcc
    - cmake
    - mercurial
    - libpcre3
    - libpcre3-dev
    - zlib1g
    - zlib1g-dev
    - libperl-dev
    - libxslt1-dev
    - libgd-ocaml-dev
    - libgeoip-dev
- name: Clone ngxqb repository
  git:
    repo: 'https://github.com/habnai/ngxqb.git'
    dest: {{ destination }}
    recursive: 'yes'
    depth: 1
- name: Build and install brotli
  command: >
    cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF
    -DCMAKE_C_FLAGS="-Ofast -m64 -march=native -mtune=native -flto
    -funroll-loops -ffunction-sections -fdata-sections -Wl,--gc-sections"
    -DCMAKE_CXX_FLAGS="-Ofast -m64 -march=native -mtune=native -flto
    -funroll-loops -ffunction-sections -fdata-sections -Wl,--gc-sections"
    -DCMAKE_INSTALL_PREFIX=/opt/ngxqb/ngx_brotli/deps/brotli/out ..
  args:
    chdir: /opt/ngxqb/ngx_brotli/deps/brotli/out
- name: Build and install nginx
  command: >
    ./auto/configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx
    --conf-path=/etc/nginx/nginx.conf --modules-path=/etc/nginx/modules # ...
    (other configuration options) --with-ld-opt='-m64 -Wl,-Bsymbolic-functions
    -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie -Wl,-s -Wl,--gc-sections'
  args:
    chdir: /opt/ngxqb/nginx
  environment:
    OPENSSL_CONF: /opt/ngxqb/openssl/apps/openssl.cnf
- name: Make and install nginx
  make:
    chdir: /opt/ngxqb/nginx
- name: Create required directories
  file:
    path: '{{ item }}'
    state: directory
    mode: 493
  loop:
    - /etc/nginx/dh
    - /etc/nginx/modules
    - /etc/nginx/sites-available
    - /etc/nginx/sites-enabled
    - /etc/nginx/sites-disabled
    - /etc/nginx/conf.d
    - /etc/nginx/html
    - /var/cache/nginx/client_temp
    - /var/cache/nginx/proxy_temp
    - /var/cache/nginx/fastcgi_temp
    - /var/cache/nginx/uwsgi_temp
    - /var/cache/nginx/scgi_temp
    - /var/log/nginx
    - /var/www/html
- name: Copy configuration files
  copy:
    src: '{{ item }}'
    dest: '{{ dest }}'
  loop:
    - /opt/ngxqb/nginx/conf/.
    - /opt/ngxqb/nginx/docs/html/.
    - /opt/ngxqb/nginx/docs/html/.
  vars:
    dest: '{{ item | regex_replace(''/opt/ngxqb/nginx/'', ''/etc/nginx/'') }}'
  with_items:
    - /opt/ngxqb/nginx/conf/.
    - /opt/ngxqb/nginx/docs/html/.
    - /opt/ngxqb/nginx/docs/html/.
- name: Copy nginx binary
  copy:
    src: /opt/ngxqb/nginx/objs/nginx
    dest: /usr/sbin/nginx
    mode: 493
- name: Set permissions for nginx log directory
  file:
    path: /var/log/nginx
    state: directory
    owner: www-data
    group: adm
    mode: 493
- name: Set permissions for nginx cache directories
  find:
    paths: /var/cache/nginx
    recurse: 'yes'
    patterns: '*'
  become: 'yes'
  file:
    path: '{{ item.path }}'
    state: directory
    owner: www-data
    group: root
    mode: 493
- name: Create systemd service file
  copy:
    dest: /etc/systemd/system/nginx.service
    content: |
      [Unit]
      Description=NGINX web server
      Documentation=https://nginx.org/en/docs/
      After=network-online.target remote-fs.target nss-lookup.target
      Wants=network-online.target

      [Service]
      Type=forking
      PIDFile=/run/nginx.pid
      ExecStart=/usr/sbin/nginx -c /etc/nginx/nginx.conf
      ExecReload=/bin/sh -c "/bin/kill -s HUP $(/bin/cat /run/nginx.pid)"
      ExecStop=/bin/sh -c "/bin/kill -s TERM $(/bin/cat /run/nginx.pid)"

      [Install]
      WantedBy=multi-user.target
- name: Reload systemd and enable nginx service
  systemd:
    daemon_reload: 'yes'
    enabled: 'yes'
    state: started
    name: nginx
